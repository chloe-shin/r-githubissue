{
  "total_count": 644,
  "incomplete_results": false,
  "items": [
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17179",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17179/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17179/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17179/events",
      "html_url": "https://github.com/facebook/react/issues/17179",
      "id": 512204709,
      "node_id": "MDU6SXNzdWU1MTIyMDQ3MDk=",
      "number": 17179,
      "title": "Dynamic import with Hook.",
      "user": {
        "login": "linkdeseda",
        "id": 18332417,
        "node_id": "MDQ6VXNlcjE4MzMyNDE3",
        "avatar_url": "https://avatars3.githubusercontent.com/u/18332417?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/linkdeseda",
        "html_url": "https://github.com/linkdeseda",
        "followers_url": "https://api.github.com/users/linkdeseda/followers",
        "following_url": "https://api.github.com/users/linkdeseda/following{/other_user}",
        "gists_url": "https://api.github.com/users/linkdeseda/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/linkdeseda/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/linkdeseda/subscriptions",
        "organizations_url": "https://api.github.com/users/linkdeseda/orgs",
        "repos_url": "https://api.github.com/users/linkdeseda/repos",
        "events_url": "https://api.github.com/users/linkdeseda/events{/privacy}",
        "received_events_url": "https://api.github.com/users/linkdeseda/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 620368407,
          "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
          "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
          "name": "Resolution: Needs More Information",
          "color": "fffde7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-10-24T22:07:11Z",
      "updated_at": "2019-10-25T00:29:23Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nTrying dynamic import with hooks and fail with this error: \r\n\r\n> Should have a queue. This is likely a bug in React. Please file an issue.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n```\r\n   const [PathTest, setPathTest] = useState(\"\");\r\n\r\n  import(`Layout/ModalTest`).then(module => setPathTest(module.default))\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nDynamic import with hooks.  This is a example with class component:\r\n\r\nimport(`${path}`).then(module => this.setState({ module: module.default }))\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n    \"react\": \"^16.9.0\",Debian,Vivaldi.\r\n\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17176",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17176/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17176/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17176/events",
      "html_url": "https://github.com/facebook/react/issues/17176",
      "id": 512147375,
      "node_id": "MDU6SXNzdWU1MTIxNDczNzU=",
      "number": 17176,
      "title": "Unnecessary re-render functional components",
      "user": {
        "login": "jefferson-vieira",
        "id": 34958329,
        "node_id": "MDQ6VXNlcjM0OTU4MzI5",
        "avatar_url": "https://avatars1.githubusercontent.com/u/34958329?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jefferson-vieira",
        "html_url": "https://github.com/jefferson-vieira",
        "followers_url": "https://api.github.com/users/jefferson-vieira/followers",
        "following_url": "https://api.github.com/users/jefferson-vieira/following{/other_user}",
        "gists_url": "https://api.github.com/users/jefferson-vieira/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jefferson-vieira/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jefferson-vieira/subscriptions",
        "organizations_url": "https://api.github.com/users/jefferson-vieira/orgs",
        "repos_url": "https://api.github.com/users/jefferson-vieira/repos",
        "events_url": "https://api.github.com/users/jefferson-vieira/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jefferson-vieira/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-24T19:51:48Z",
      "updated_at": "2019-10-24T19:57:47Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "Hi,\r\n\r\nI was thinking about functional components and performance enhancements.\r\nDoing some tests, I noticed that react re-render children provided by functional components again when parent updates, even when they just render a static JSX (don't receive props or use any value provided by a useState hook, for example, like `const Component = () => <h1>Hellow World!</h1>`).\r\nBut using a `React.memo` HOC (with or without a mocked `propsAreEquals` function as argument, like `() => true`) the behavior is the expect \"don't re-render\". Do this really necessary? I think React can jump this automatic, because the component don't have a trigger can change its final result.\r\nOr, am I not noticing something?\r\nIt is easy to replicate this test case, but I can provide a test repository if necessary.\r\nWhat do you think?\r\nI use devTools highlights to see render events.",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17173",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17173/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17173/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17173/events",
      "html_url": "https://github.com/facebook/react/issues/17173",
      "id": 511907316,
      "node_id": "MDU6SXNzdWU1MTE5MDczMTY=",
      "number": 17173,
      "title": "Question about useLayoutEffect",
      "user": {
        "login": "jlkiri",
        "id": 38713361,
        "node_id": "MDQ6VXNlcjM4NzEzMzYx",
        "avatar_url": "https://avatars0.githubusercontent.com/u/38713361?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlkiri",
        "html_url": "https://github.com/jlkiri",
        "followers_url": "https://api.github.com/users/jlkiri/followers",
        "following_url": "https://api.github.com/users/jlkiri/following{/other_user}",
        "gists_url": "https://api.github.com/users/jlkiri/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jlkiri/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jlkiri/subscriptions",
        "organizations_url": "https://api.github.com/users/jlkiri/orgs",
        "repos_url": "https://api.github.com/users/jlkiri/repos",
        "events_url": "https://api.github.com/users/jlkiri/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jlkiri/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-10-24T12:19:52Z",
      "updated_at": "2019-10-24T14:29:05Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is a question.\r\n\r\n**What is the current behavior?**\r\n\r\n`useLayoutEffect` does not always seem to complete operations before DOM paint.\r\nI use `useLayoutEffect` to apply certain styles to elements before they are painted to DOM. In particular, I am trying to reproduce the [FLIP](https://css-tricks.com/animating-layouts-with-the-flip-technique/) technique to make shuffling a list pretty. I store DOM coordinates for every list child in a `ref` object on first render, and on second render in `useLayoutEffect` I use those to compare with new coordinates and trigger an animation. To keep track of children I give them a `data-id` attribute.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nIn my demo I randomly shuffle items, but animations do not happen if I sort them back to their initial state, in which they are ordered.\r\n\r\nHere is the demo:\r\nhttps://flip.jlkiri.now.sh/\r\nOR\r\nhttps://codesandbox.io/s/gallant-heyrovsky-dwdps\r\n\r\nHere is the code for the demo and the hook I use:\r\nhttps://github.com/jlkiri/react-easy-flip\r\nhttps://github.com/jlkiri/react-easy-flip/blob/master/src/hooks/useFlip.js\r\n\r\n**What is the expected behavior?**\r\n\r\nMy understanding is that restoring the initial order should work just like shuffling, since DOM position for a particular child with a particular `data-id` changes. Is this a result of some hidden heuristics of the React renderer or a bug?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.10.2\r\nOS: Windows\r\nBrowsers: Chrome, Firefox, Edge\r\nPrevious versions: Do not know about versions in which it works\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17170",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17170/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17170/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17170/events",
      "html_url": "https://github.com/facebook/react/issues/17170",
      "id": 511252283,
      "node_id": "MDU6SXNzdWU1MTEyNTIyODM=",
      "number": 17170,
      "title": "dangerouslySetInnerHTML, children, and a bogus hydration warning",
      "user": {
        "login": "jaydenseric",
        "id": 1754873,
        "node_id": "MDQ6VXNlcjE3NTQ4NzM=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1754873?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jaydenseric",
        "html_url": "https://github.com/jaydenseric",
        "followers_url": "https://api.github.com/users/jaydenseric/followers",
        "following_url": "https://api.github.com/users/jaydenseric/following{/other_user}",
        "gists_url": "https://api.github.com/users/jaydenseric/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jaydenseric/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jaydenseric/subscriptions",
        "organizations_url": "https://api.github.com/users/jaydenseric/orgs",
        "repos_url": "https://api.github.com/users/jaydenseric/repos",
        "events_url": "https://api.github.com/users/jaydenseric/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jaydenseric/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-10-23T11:13:04Z",
      "updated_at": "2019-10-23T20:43:51Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug (initially reported at https://github.com/zeit/next.js/issues/9173).\r\n\r\n**What is the current behavior?**\r\n\r\nIf a component has both `dangerouslySetInnerHTML` and `children` props, and the component is used with just the `children` prop, on page load the client logs a warning beginning with ``Warning: Prop `dangerouslySetInnerHTML` did not match.``.\r\n\r\nInterestingly:\r\n\r\n- If just `dangerouslySetInnerHTML` is used there is no warning.\r\n- Multiple instances with just a `children` prop results in only one warning, for the first occurance.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nDemo: https://codesandbox.io/s/react-hydration-warning-demo-3je59\r\n\r\nIn a Next.js project, create a page with the following content:\r\n\r\n```jsx\r\nconst TestComponent = ({ dangerouslySetInnerHTML, children }) => (\r\n  <div dangerouslySetInnerHTML={dangerouslySetInnerHTML} children={children} />\r\n)\r\n\r\nexport default () => <TestComponent>a</TestComponent>\r\n```\r\n\r\nLoading the page in a browser will result in this warning logging to the console:\r\n\r\n```\r\nWarning: Prop `dangerouslySetInnerHTML` did not match. Server: \"a\" Client: \"\"\r\n```\r\n\r\nNote that the hydration warning is bogus; using view source and the inspector you can see the SSR and client rendered HTML is identical and correct.\r\n\r\nThis works just the same as before but without a hydration warning:\r\n\r\n```jsx\r\nconst TestComponent = ({ dangerouslySetInnerHTML, children }) => {\r\n  const divProps = {}\r\n  if (dangerouslySetInnerHTML)\r\n    divProps.dangerouslySetInnerHTML = dangerouslySetInnerHTML\r\n  if (children) divProps.children = children\r\n\r\n  return <div {...divProps} />\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThere should be no hydration warning at first client render.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNot sure if the bug is present in old versions of React, but it can be seen with v16.11.0.",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17168",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17168/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17168/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17168/events",
      "html_url": "https://github.com/facebook/react/issues/17168",
      "id": 511024159,
      "node_id": "MDU6SXNzdWU1MTEwMjQxNTk=",
      "number": 17168,
      "title": "Script tags are rendered inconsistently between client and server (html-encoded on server)",
      "user": {
        "login": "accidentaldeveloper",
        "id": 5819232,
        "node_id": "MDQ6VXNlcjU4MTkyMzI=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/5819232?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/accidentaldeveloper",
        "html_url": "https://github.com/accidentaldeveloper",
        "followers_url": "https://api.github.com/users/accidentaldeveloper/followers",
        "following_url": "https://api.github.com/users/accidentaldeveloper/following{/other_user}",
        "gists_url": "https://api.github.com/users/accidentaldeveloper/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/accidentaldeveloper/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/accidentaldeveloper/subscriptions",
        "organizations_url": "https://api.github.com/users/accidentaldeveloper/orgs",
        "repos_url": "https://api.github.com/users/accidentaldeveloper/repos",
        "events_url": "https://api.github.com/users/accidentaldeveloper/events{/privacy}",
        "received_events_url": "https://api.github.com/users/accidentaldeveloper/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-10-23T01:58:52Z",
      "updated_at": "2019-10-23T02:02:11Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\nServer-rendered script tags are html-encoded. Client-rendered script tags are not.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n1. Render a script tag with quotes on the server.\r\n2. Render a script tag with quotes on the client.\r\n3. Compare the output. \r\n\r\nNote that the quotes are html-encoded to `&quot`.\r\n\r\nThis CodeSandbox is a little rough but very simple: https://codesandbox.io/s/affectionate-star-xe8ym\r\n\r\n**What is the expected behavior?**\r\nThe script tag content is not html-encoded on either the server or the client.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8.6\r\nI'm not sure when this was introduced.",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17163",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17163/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17163/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17163/events",
      "html_url": "https://github.com/facebook/react/issues/17163",
      "id": 510317658,
      "node_id": "MDU6SXNzdWU1MTAzMTc2NTg=",
      "number": 17163,
      "title": "React re-executes render() right after an exception has been thrown in the same render() method",
      "user": {
        "login": "tonix-tuft",
        "id": 10134421,
        "node_id": "MDQ6VXNlcjEwMTM0NDIx",
        "avatar_url": "https://avatars2.githubusercontent.com/u/10134421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tonix-tuft",
        "html_url": "https://github.com/tonix-tuft",
        "followers_url": "https://api.github.com/users/tonix-tuft/followers",
        "following_url": "https://api.github.com/users/tonix-tuft/following{/other_user}",
        "gists_url": "https://api.github.com/users/tonix-tuft/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tonix-tuft/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tonix-tuft/subscriptions",
        "organizations_url": "https://api.github.com/users/tonix-tuft/orgs",
        "repos_url": "https://api.github.com/users/tonix-tuft/repos",
        "events_url": "https://api.github.com/users/tonix-tuft/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tonix-tuft/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-10-21T22:00:35Z",
      "updated_at": "2019-10-22T03:55:33Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nI would like to clarify a doubt regarding this behaviour (maybe a bug? I don't know).\r\n\r\n**What is the current behavior?**\r\nBy playing with the Error Boundaries demo:\r\n\r\nhttps://codepen.io/gaearon/pen/wqvxGa?editors=0010\r\n\r\nI discovered that when an exception is thrown in `render()`, React re-executes that same `render()` method before running the corresponding Error Boundary's code.\r\n\r\nCheck out the same code with a `console.log` line added both to `BuggyCounter.render()` and `componentDidCatch()`:\r\n\r\n```\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { error: null, errorInfo: null };\r\n  }\r\n  \r\n  componentDidCatch(error, errorInfo) {\r\n    // Catch errors in any components below and re-render with error message\r\n    console.log('componentDidCatch') // <------------------- LOG\r\n    this.setState({\r\n      error: error,\r\n      errorInfo: errorInfo\r\n    })\r\n    // You can also log error messages to an error reporting service here\r\n  }\r\n  \r\n  render() {\r\n    if (this.state.errorInfo) {\r\n      // Error path\r\n      return (\r\n        <div>\r\n          <h2>Something went wrong.</h2>\r\n          <details style={{ whiteSpace: 'pre-wrap' }}>\r\n            {this.state.error && this.state.error.toString()}\r\n            <br />\r\n            {this.state.errorInfo.componentStack}\r\n          </details>\r\n        </div>\r\n      );\r\n    }\r\n    // Normally, just render children\r\n    return this.props.children;\r\n  }  \r\n}\r\n\r\nclass BuggyCounter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { counter: 0 };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n  \r\n  handleClick() {\r\n    this.setState(({counter}) => ({\r\n      counter: counter + 1\r\n    }));\r\n  }\r\n  \r\n  render() {\r\n    console.log('this.state.counter', this.state.counter) // <------------------- LOG\r\n    if (this.state.counter === 5) {\r\n      // Simulate a JS error\r\n      throw new Error('I crashed!');\r\n    }\r\n    return <h1 onClick={this.handleClick}>{this.state.counter}</h1>;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <p>\r\n        <b>\r\n          This is an example of error boundaries in React 16.\r\n          <br /><br />\r\n          Click on the numbers to increase the counters.\r\n          <br />\r\n          The counter is programmed to throw when it reaches 5. This simulates a JavaScript error in a component.\r\n        </b>\r\n      </p>\r\n      <hr />\r\n      <ErrorBoundary>\r\n        <p>These two counters are inside the same error boundary. If one crashes, the error boundary will replace both of them.</p>\r\n        <BuggyCounter />\r\n        <BuggyCounter />\r\n      </ErrorBoundary>\r\n      <hr />\r\n      <p>These two counters are each inside of their own error boundary. So if one crashes, the other is not affected.</p>\r\n      <ErrorBoundary><BuggyCounter /></ErrorBoundary>\r\n      <ErrorBoundary><BuggyCounter /></ErrorBoundary>\r\n    </div>\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n```\r\n\r\nAfter the first rendering I see (OK):\r\n\r\n![Screen Shot 2019-10-21 at 23 33 31](https://user-images.githubusercontent.com/10134421/67245825-3633a180-f45d-11e9-964d-b59b80ec09ae.png)\r\n\r\nAfter clicking on the counter 4 times (OK):\r\n\r\n![Screen Shot 2019-10-21 at 23 33 43](https://user-images.githubusercontent.com/10134421/67245865-51061600-f45d-11e9-9e27-f02fcdc31c73.png)\r\n\r\nThen, after clicking once more (Why does `render()` gets executed twice?):\r\n\r\n![Screen Shot 2019-10-21 at 23 33 54](https://user-images.githubusercontent.com/10134421/67245916-7004a800-f45d-11e9-908f-ebd93dac4326.png)\r\n\r\nAfter that, `componentDidCatch()` is, as expected, executed only once.\r\n\r\n**What is the expected behavior?**\r\nCannot tell. This is not a problem in se because of the idempotent nature of `render()` (which has to be pure), but makes me think that this is an unneeded call because if an error has been thrown in `render()`, re-executing it right away would still lead to the same exception being thrown.\r\n\r\nOr, is there something I am missing? Maybe related to how React works internally and because of that it needs to recall `render()` as soon as that same `render()` has thrown...\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nOS: OS X\r\nBrowser: Chrome 77\r\nUsing the same React 16 development version of the Pen:\r\n\r\n`https://unpkg.com/react@16/umd/react.development.js`\r\n`https://unpkg.com/react-dom@16/umd/react-dom.development.js`\r\n\r\nThank you for the attention.\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17157",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17157/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17157/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17157/events",
      "html_url": "https://github.com/facebook/react/issues/17157",
      "id": 509919136,
      "node_id": "MDU6SXNzdWU1MDk5MTkxMzY=",
      "number": 17157,
      "title": "[DOM] Add support for the `inert` attribute",
      "user": {
        "login": "kripod",
        "id": 14854048,
        "node_id": "MDQ6VXNlcjE0ODU0MDQ4",
        "avatar_url": "https://avatars3.githubusercontent.com/u/14854048?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kripod",
        "html_url": "https://github.com/kripod",
        "followers_url": "https://api.github.com/users/kripod/followers",
        "following_url": "https://api.github.com/users/kripod/following{/other_user}",
        "gists_url": "https://api.github.com/users/kripod/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kripod/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kripod/subscriptions",
        "organizations_url": "https://api.github.com/users/kripod/orgs",
        "repos_url": "https://api.github.com/users/kripod/repos",
        "events_url": "https://api.github.com/users/kripod/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kripod/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-10-21T12:06:09Z",
      "updated_at": "2019-10-21T17:07:48Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen specifying `inert={false}` on an element, React throws the following message:\r\n\r\n```\r\nWarning: Received `false` for a non-boolean attribute `inert`.\r\n```\r\n\r\nHowever, `inert={undefined}` works fine as a replacement for `false`, while `inert=\"\"` (empty string) provides an escape hatch as a truthy value.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe `inert` attribute should be accepted as a boolean DOM attribute, as [proposed](https://html.spec.whatwg.org/multipage/interaction.html#inert) by the HTML Standard.\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17153",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17153/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17153/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17153/events",
      "html_url": "https://github.com/facebook/react/issues/17153",
      "id": 509657172,
      "node_id": "MDU6SXNzdWU1MDk2NTcxNzI=",
      "number": 17153,
      "title": "Infinite loop of errors when host config is missing `getRootHostContext`",
      "user": {
        "login": "sophiebits",
        "id": 6820,
        "node_id": "MDQ6VXNlcjY4MjA=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sophiebits",
        "html_url": "https://github.com/sophiebits",
        "followers_url": "https://api.github.com/users/sophiebits/followers",
        "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
        "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
        "organizations_url": "https://api.github.com/users/sophiebits/orgs",
        "repos_url": "https://api.github.com/users/sophiebits/repos",
        "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sophiebits/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 739761016,
          "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
          "name": "Component: Reconciler",
          "color": "f9a798",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-20T21:43:45Z",
      "updated_at": "2019-10-25T00:29:38Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "body": "**Do you want to request a *feature* or report a *bug*?** bug\r\n\r\n**What is the current behavior?** If you start writing a shitty reconciler:\r\n\r\n```\r\nimport React from 'react';\r\nimport ReactReconciler from 'react-reconciler';\r\nlet reconciler = ReactReconciler({\r\n  /* empty host config */\r\n});\r\nlet container = reconciler.createContainer(null, false, false);\r\nreconciler.updateContainer(<div />, container, null, null);\r\n```\r\n\r\nthen you get this error in an infinite loop:\r\n\r\n```\r\nUncaught TypeError: getRootHostContext is not a function\r\n    at pushHostContainer (react-reconciler.development.js:5526)\r\n    at pushHostRootContext (react-reconciler.development.js:8152)\r\n    at beginWork$1 (react-reconciler.development.js:9599)\r\n    at HTMLUnknownElement.callCallback (react-reconciler.development.js:11399)\r\n    at Object.invokeGuardedCallbackDev (react-reconciler.development.js:11448)\r\n    at invokeGuardedCallback (react-reconciler.development.js:11499)\r\n    at beginWork$$1 (react-reconciler.development.js:15639)\r\n    at performUnitOfWork (react-reconciler.development.js:14544)\r\n    at workLoopSync (react-reconciler.development.js:14520)\r\n    at performSyncWorkOnRoot (react-reconciler.development.js:14072)\r\n    at react-reconciler.development.js:1966\r\n    at unstable_runWithPriority (scheduler.development.js:818)\r\n    at runWithPriority (react-reconciler.development.js:1912)\r\n    at flushSyncCallbackQueueImpl (react-reconciler.development.js:1961)\r\n    at flushSyncCallbackQueue (react-reconciler.development.js:1949)\r\n    at scheduleUpdateOnFiber (react-reconciler.development.js:13490)\r\n    at scheduleRootUpdate (react-reconciler.development.js:16860)\r\n    at updateContainerAtExpirationTime (react-reconciler.development.js:16886)\r\n    at Object.updateContainer (react-reconciler.development.js:16986)\r\n ```\r\n\r\nPresumably this also happens if getRootHostContext is buggy and itself throws.\r\n\r\n**What is the expected behavior?** I'd expect it to crash once or twice and then stop. (This seems specific to `getRootHostContext`; no other missing method had the same result.) My recollection is we do intend to catch errors in host configs; if I'm misremembering feel free to wontfix.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** react-reconciler 0.22.2 (from the 16.10.2 release)\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17151",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17151/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17151/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17151/events",
      "html_url": "https://github.com/facebook/react/issues/17151",
      "id": 509614257,
      "node_id": "MDU6SXNzdWU1MDk2MTQyNTc=",
      "number": 17151,
      "title": "Bailing out doesn't work properly in lazy components with default props",
      "user": {
        "login": "jddxf",
        "id": 11155177,
        "node_id": "MDQ6VXNlcjExMTU1MTc3",
        "avatar_url": "https://avatars2.githubusercontent.com/u/11155177?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jddxf",
        "html_url": "https://github.com/jddxf",
        "followers_url": "https://api.github.com/users/jddxf/followers",
        "following_url": "https://api.github.com/users/jddxf/following{/other_user}",
        "gists_url": "https://api.github.com/users/jddxf/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jddxf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jddxf/subscriptions",
        "organizations_url": "https://api.github.com/users/jddxf/orgs",
        "repos_url": "https://api.github.com/users/jddxf/repos",
        "events_url": "https://api.github.com/users/jddxf/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jddxf/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-20T15:58:13Z",
      "updated_at": "2019-10-20T15:58:13Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nBailing out doesn't work properly in lazy components with default props. It seems we're incorrectly [comparing unresolved props (oldProps) with resolved props (newProps)](https://github.com/facebook/react/blob/62b04cfa753076d5ffb1d74b855f8f8db36f5186/packages/react-reconciler/src/ReactFiberClassComponent.js#L1100).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/stoic-curran-3otbb\r\n\r\n**What is the expected behavior?**\r\nIn the example above, `componentDidUpdate` shouldn't have been called when the button is clicked.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17148",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17148/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17148/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17148/events",
      "html_url": "https://github.com/facebook/react/issues/17148",
      "id": 509461874,
      "node_id": "MDU6SXNzdWU1MDk0NjE4NzQ=",
      "number": 17148,
      "title": "[RFC] React DevTools - configurable style prop for live editing",
      "user": {
        "login": "giuseppeg",
        "id": 711311,
        "node_id": "MDQ6VXNlcjcxMTMxMQ==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/711311?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/giuseppeg",
        "html_url": "https://github.com/giuseppeg",
        "followers_url": "https://api.github.com/users/giuseppeg/followers",
        "following_url": "https://api.github.com/users/giuseppeg/following{/other_user}",
        "gists_url": "https://api.github.com/users/giuseppeg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/giuseppeg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/giuseppeg/subscriptions",
        "organizations_url": "https://api.github.com/users/giuseppeg/orgs",
        "repos_url": "https://api.github.com/users/giuseppeg/repos",
        "events_url": "https://api.github.com/users/giuseppeg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/giuseppeg/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-19T14:38:33Z",
      "updated_at": "2019-10-21T21:47:11Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Right now the React DevTools expose an undocumented hook for React Native that allows to register a function that is used to enable styles editing in the dev tools:\r\n\r\n<img width=\"1066\" alt=\"Screen Shot 2019-10-19 at 4 30 16 PM\" src=\"https://user-images.githubusercontent.com/711311/67146710-fb2f4380-f28d-11e9-9ce4-c037acc708c3.png\">\r\n\r\nFor example React Native for Web uses it\r\n\r\nhttps://github.com/necolas/react-native-web/blob/36dacb2052efdab2a28655773dc76934157d9134/packages/react-native-web/src/exports/StyleSheet/index.js#L13-L16\r\n\r\nIt would be great if the prop name was configurable (right now it can only be `style`) so that other CSS in JS libraries could use this hook and if the editor would allow 1) arrays of style objects 2) nested objects for things like pseudo elements:\r\n\r\n```js\r\nstyle {\r\n  flex: 1;\r\n  '&:hover': {\r\n     color: 'red'\r\n  }\r\n}\r\n```\r\n\r\nI think that the above is already possible but it has to be provided as JSON. Couldn't it be `eval`d when JSON parse fails?\r\n\r\nWhen this hook is registered probably the dev tools should hide the same prop from the `props` pane.",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17147",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17147/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17147/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17147/events",
      "html_url": "https://github.com/facebook/react/issues/17147",
      "id": 509439275,
      "node_id": "MDU6SXNzdWU1MDk0MzkyNzU=",
      "number": 17147,
      "title": "react-reconciler & portals: missing root instance",
      "user": {
        "login": "drcmda",
        "id": 2223602,
        "node_id": "MDQ6VXNlcjIyMjM2MDI=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/2223602?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/drcmda",
        "html_url": "https://github.com/drcmda",
        "followers_url": "https://api.github.com/users/drcmda/followers",
        "following_url": "https://api.github.com/users/drcmda/following{/other_user}",
        "gists_url": "https://api.github.com/users/drcmda/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/drcmda/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/drcmda/subscriptions",
        "organizations_url": "https://api.github.com/users/drcmda/orgs",
        "repos_url": "https://api.github.com/users/drcmda/repos",
        "events_url": "https://api.github.com/users/drcmda/events{/privacy}",
        "received_events_url": "https://api.github.com/users/drcmda/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-10-19T11:49:19Z",
      "updated_at": "2019-10-19T12:06:08Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "This is a problem i am facing with the [react-three-fiber](https://github.com/drcmda/react-three-fiber), a react renderer for threejs.  The following image is probably a good overview:\r\n\r\n![reconciler](https://user-images.githubusercontent.com/2223602/67144414-59502c80-f276-11e9-89d1-97496ee10b8c.jpg)\r\n\r\nBasically i have a reconciler, it has a root instance, a scene in my case into which everything's rendered. I keep special information in that scene, which i need when constructing new objects.\r\n\r\nNow, when i use createPortal, like so:\r\n\r\n```jsx\r\nfunction A() {\r\n  // Create virtual scene\r\n  const virtualScene = useMemo(() => new THREE.Scene(), [])\r\n\r\n  // Render elements into the virtual scene via createPortal\r\n  return createPortal(\r\n    <mesh onClick={() => console.log(\"clicked\")}>\r\n      <meshNormalMaterial attach=\"material\" />\r\n      <boxBufferGeometry attach=\"geometry\" args={[10, 10, 10]} />\r\n    </mesh>\r\n    virtualScene,\r\n  )\r\n}\r\n```\r\n\r\nthen the createInstance inside the reconciler will receive the following:\r\n\r\n```jsx\r\ncreateInstance(\r\n  type = \"meshNormalMaterial\",\r\n  props = { attach: \"material\" },\r\n  container = virtualScene,\r\n  hostContext = {},\r\n  internalInstanceHandle = { ... }\r\n)\r\n```\r\n\r\nThe problem that i face is that i also need to know the root instance into which the portal is rendered, but there seem to be no obvious means to get it. Digging around i noticed that the  internalInstanceHandle fibernode contains it when i traverse it:\r\n\r\n```jsx\r\nconst fn = (node: Reconciler.Fiber): THREE.Object3D => {\r\n  if (!node.return) return node.stateNode.containerInfo\r\n  else return fn(node.return)\r\n}\r\nlet scene = fn(internalInstanceHandle) // ---> the root scene\r\n```\r\n\r\nBut that seems pretty sketchy. Is there any other way, or could it be exposed?",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17140",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17140/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17140/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17140/events",
      "html_url": "https://github.com/facebook/react/issues/17140",
      "id": 509307804,
      "node_id": "MDU6SXNzdWU1MDkzMDc4MDQ=",
      "number": 17140,
      "title": "SuspenseList in DevTools could cycle through the Suspense states",
      "user": {
        "login": "sebmarkbage",
        "id": 63648,
        "node_id": "MDQ6VXNlcjYzNjQ4",
        "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sebmarkbage",
        "html_url": "https://github.com/sebmarkbage",
        "followers_url": "https://api.github.com/users/sebmarkbage/followers",
        "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
        "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
        "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
        "repos_url": "https://api.github.com/users/sebmarkbage/repos",
        "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-10-18T20:59:21Z",
      "updated_at": "2019-10-21T21:48:05Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "We currently have a way to force a fallback on a Suspense boundary in DevTools.\r\n\r\nIt might be cool to have a \"play\" button or something on SuspenseList that cycles through the states.\r\n\r\nE.g. if it's \"together\" mode it shows all the fallbacks and then switches to showing all the content and then back again in a loop.\r\n\r\nIf it's \"forwards\" it shows all the fallbacks then one at a time and then back to all fallbacks. If it's tail \"hidden\" or \"collapsed\" it hides all the ones that are not yet inserted and then inserts one at a time.\r\n\r\nCould be a nice way to demo/test the loading sequence experience.",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17134",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17134/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17134/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17134/events",
      "html_url": "https://github.com/facebook/react/issues/17134",
      "id": 508938869,
      "node_id": "MDU6SXNzdWU1MDg5Mzg4Njk=",
      "number": 17134,
      "title": "React Devtools should produce a better error message when integers are present as keys on react elements",
      "user": {
        "login": "alexkolson",
        "id": 281637,
        "node_id": "MDQ6VXNlcjI4MTYzNw==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/281637?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alexkolson",
        "html_url": "https://github.com/alexkolson",
        "followers_url": "https://api.github.com/users/alexkolson/followers",
        "following_url": "https://api.github.com/users/alexkolson/following{/other_user}",
        "gists_url": "https://api.github.com/users/alexkolson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/alexkolson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/alexkolson/subscriptions",
        "organizations_url": "https://api.github.com/users/alexkolson/orgs",
        "repos_url": "https://api.github.com/users/alexkolson/repos",
        "events_url": "https://api.github.com/users/alexkolson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/alexkolson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false
        },
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "bvaughn",
          "id": 29597,
          "node_id": "MDQ6VXNlcjI5NTk3",
          "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bvaughn",
          "html_url": "https://github.com/bvaughn",
          "followers_url": "https://api.github.com/users/bvaughn/followers",
          "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
          "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
          "organizations_url": "https://api.github.com/users/bvaughn/orgs",
          "repos_url": "https://api.github.com/users/bvaughn/repos",
          "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bvaughn/received_events",
          "type": "User",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2019-10-18T08:42:25Z",
      "updated_at": "2019-10-21T22:35:53Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "Current behavior: React Devtools throws \"RangError: Invalid Array Length\" when integers are used as keys on react elements. \r\n\r\nExample: \r\n\r\nhttps://codesandbox.io/s/interesting-violet-v5c5j\r\n\r\nhttps://v5c5j.csb.app/\r\n\r\nUsing anything but strings as keys is as far as I understand not even correct usage, but it would be great if react devtools checked a little bit earlier and had a nicer error than \"RangeError: Invalid Array Length.\" It takes a long time to figure out from this message that one somehow managed to use integers as keys and needs to correct it.\r\n\r\nI've only tested with Chrome and the latest version of react devtools as a chrome extension. ",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17127",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17127/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17127/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17127/events",
      "html_url": "https://github.com/facebook/react/issues/17127",
      "id": 508431166,
      "node_id": "MDU6SXNzdWU1MDg0MzExNjY=",
      "number": 17127,
      "title": "Can't sure which action triggered function getDerivedStateFromProps",
      "user": {
        "login": "awefeng",
        "id": 13977563,
        "node_id": "MDQ6VXNlcjEzOTc3NTYz",
        "avatar_url": "https://avatars2.githubusercontent.com/u/13977563?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/awefeng",
        "html_url": "https://github.com/awefeng",
        "followers_url": "https://api.github.com/users/awefeng/followers",
        "following_url": "https://api.github.com/users/awefeng/following{/other_user}",
        "gists_url": "https://api.github.com/users/awefeng/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/awefeng/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/awefeng/subscriptions",
        "organizations_url": "https://api.github.com/users/awefeng/orgs",
        "repos_url": "https://api.github.com/users/awefeng/repos",
        "events_url": "https://api.github.com/users/awefeng/events{/privacy}",
        "received_events_url": "https://api.github.com/users/awefeng/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-17T12:08:46Z",
      "updated_at": "2019-10-17T12:09:39Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n[feature]\r\n**What is the current behavior?**\r\nCan't sure which action triggered function getDerivedStateFromProps\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nnull\r\n**What is the expected behavior?**\r\nmaybe should add a param in getDerivedStateFromProps, to mark which action triggered , constructor, new props, setState, or forceUpdate ?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nthe lastest vesion",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17121",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17121/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17121/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17121/events",
      "html_url": "https://github.com/facebook/react/issues/17121",
      "id": 508106437,
      "node_id": "MDU6SXNzdWU1MDgxMDY0Mzc=",
      "number": 17121,
      "title": "debug-test don't work",
      "user": {
        "login": "BogdanDor",
        "id": 5732341,
        "node_id": "MDQ6VXNlcjU3MzIzNDE=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/5732341?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BogdanDor",
        "html_url": "https://github.com/BogdanDor",
        "followers_url": "https://api.github.com/users/BogdanDor/followers",
        "following_url": "https://api.github.com/users/BogdanDor/following{/other_user}",
        "gists_url": "https://api.github.com/users/BogdanDor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/BogdanDor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/BogdanDor/subscriptions",
        "organizations_url": "https://api.github.com/users/BogdanDor/orgs",
        "repos_url": "https://api.github.com/users/BogdanDor/repos",
        "events_url": "https://api.github.com/users/BogdanDor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/BogdanDor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-10-16T21:21:48Z",
      "updated_at": "2019-10-18T17:08:18Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nThrow exception, don't run tests.\r\nSyntaxError: missing ) after argument list\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n1. Run one of the commands:\r\n- yarn debug-test\r\n- yarn debug-test-persistent\r\n- yarn debug-test-build-devtools\r\n\r\n2. Open chrome://inspect and press “Inspect”.\r\n\r\n**What is the expected behavior?**\r\nPossibility debug tests.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.2.0 and higher.\r\nChrome 77.0.3865.120\r\nWindows 10.\r\nOlder version React hasn't this feature.",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17114",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17114/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17114/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17114/events",
      "html_url": "https://github.com/facebook/react/issues/17114",
      "id": 507830238,
      "node_id": "MDU6SXNzdWU1MDc4MzAyMzg=",
      "number": 17114,
      "title": "dangerouslySetInnerHTML causes page to scroll to top",
      "user": {
        "login": "vnankov",
        "id": 12615872,
        "node_id": "MDQ6VXNlcjEyNjE1ODcy",
        "avatar_url": "https://avatars1.githubusercontent.com/u/12615872?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vnankov",
        "html_url": "https://github.com/vnankov",
        "followers_url": "https://api.github.com/users/vnankov/followers",
        "following_url": "https://api.github.com/users/vnankov/following{/other_user}",
        "gists_url": "https://api.github.com/users/vnankov/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vnankov/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vnankov/subscriptions",
        "organizations_url": "https://api.github.com/users/vnankov/orgs",
        "repos_url": "https://api.github.com/users/vnankov/repos",
        "events_url": "https://api.github.com/users/vnankov/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vnankov/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 12,
      "created_at": "2019-10-16T12:48:53Z",
      "updated_at": "2019-10-24T13:48:27Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n* It's a bug\r\n* The problem is only when we get the content from the dangerouslySetInnerHTML property.\r\n\r\n**What is the current behavior?**\r\n\r\n* When you have anchor tags that should scroll down the page to the related id, instead of scroll down it scrolls up to (0,0) coordinates.\r\n* This is our site, take a look for yourself: https://www.emerchantpay.com/insights/online-payments-germany/\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n* It should behave as normal anchor tag and scroll to its relevant id.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n * It all works fine only for Google Chrome Browser Desktop version and Chrome for Androind. It won't work for Mozila, Safari, etc. for mobile and desktop. Also does not work for any browser on IOS.",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17112",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17112/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17112/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17112/events",
      "html_url": "https://github.com/facebook/react/issues/17112",
      "id": 507712468,
      "node_id": "MDU6SXNzdWU1MDc3MTI0Njg=",
      "number": 17112,
      "title": "Resetting an animation in useEffect React is not setting all state variables to initial state",
      "user": {
        "login": "Amit-Tomar",
        "id": 5795958,
        "node_id": "MDQ6VXNlcjU3OTU5NTg=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/5795958?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Amit-Tomar",
        "html_url": "https://github.com/Amit-Tomar",
        "followers_url": "https://api.github.com/users/Amit-Tomar/followers",
        "following_url": "https://api.github.com/users/Amit-Tomar/following{/other_user}",
        "gists_url": "https://api.github.com/users/Amit-Tomar/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Amit-Tomar/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Amit-Tomar/subscriptions",
        "organizations_url": "https://api.github.com/users/Amit-Tomar/orgs",
        "repos_url": "https://api.github.com/users/Amit-Tomar/repos",
        "events_url": "https://api.github.com/users/Amit-Tomar/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Amit-Tomar/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2019-10-16T08:58:26Z",
      "updated_at": "2019-10-20T19:36:48Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Bug**\r\n\r\n**What is the current behavior?**\r\n\r\nI have a simple animation -\r\n\r\n1. Lines get highlighted one after the other on click of a button.\r\n\r\n2. Clicking on button again, while the animation is running, should de-highlight the lines to original state. \r\n\r\nI use [GSAP](https://greensock.com/gsap/) for doing animations.\r\n\r\nOn setting the timeline progress of animation to 0, all the values get reset, however, the last one modified continues to remain in same state. \r\n\r\nTo reproduce, click the button, and after a couple lines have highlighted, click the button again. \r\n\r\nCode Sandbox : https://codesandbox.io/s/inspiring-gates-poozb\r\n\r\n**What is the expected behavior?**\r\n\r\nAll the variables would have been set to false on toggling the animation state. However, the last modified variable in the current animation remains in the same state.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nWorking with following dependencies: \r\n![Screenshot 2019-10-16 at 2 13 50 PM](https://user-images.githubusercontent.com/5795958/66903064-61faf580-f01f-11e9-9863-48200839afea.png)\r\n\r\nDoesn't work as expected with following dependencies: \r\n![Screenshot 2019-10-16 at 2 13 23 PM](https://user-images.githubusercontent.com/5795958/66903143-8c4cb300-f01f-11e9-9fd6-71ad763cb626.png)\r\n\r\nPlatform tested on : Mac OS Mojave with latest Chrome.\r\n\r\nI would like to understand what is causing this issue and steps I can take to make it work in the above mentioned version where it doesn't work. \r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17109",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17109/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17109/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17109/events",
      "html_url": "https://github.com/facebook/react/issues/17109",
      "id": 507682173,
      "node_id": "MDU6SXNzdWU1MDc2ODIxNzM=",
      "number": 17109,
      "title": "Question: How to rewrite setState(state, callback) with hooks",
      "user": {
        "login": "yoyo837",
        "id": 6134547,
        "node_id": "MDQ6VXNlcjYxMzQ1NDc=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/6134547?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yoyo837",
        "html_url": "https://github.com/yoyo837",
        "followers_url": "https://api.github.com/users/yoyo837/followers",
        "following_url": "https://api.github.com/users/yoyo837/following{/other_user}",
        "gists_url": "https://api.github.com/users/yoyo837/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/yoyo837/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/yoyo837/subscriptions",
        "organizations_url": "https://api.github.com/users/yoyo837/orgs",
        "repos_url": "https://api.github.com/users/yoyo837/repos",
        "events_url": "https://api.github.com/users/yoyo837/events{/privacy}",
        "received_events_url": "https://api.github.com/users/yoyo837/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-16T07:59:49Z",
      "updated_at": "2019-10-16T07:59:49Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "First of all, I am sorry that my English is poor.\r\n\r\n#14493\r\n#15772 \r\n\r\nI found some similar issues, but I think the things I want to explain will be different. When my callback doesn't always do something periodically based on some conditions, it seems that useEffect doesn't quite meet the requirements.\r\n\r\nFor example, using setState data to modify the DOM, and in rare cases, other processing of the DOM will be required in the callback. But the prerequisites for doing these things can be complex and irregular, so useEffect seems to be difficult to do.",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17106",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17106/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17106/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17106/events",
      "html_url": "https://github.com/facebook/react/issues/17106",
      "id": 507586260,
      "node_id": "MDU6SXNzdWU1MDc1ODYyNjA=",
      "number": 17106,
      "title": "Why is useLayoutEffect using UnmountMutation instead of UnmountLayout?",
      "user": {
        "login": "rainbowcatcher",
        "id": 9025276,
        "node_id": "MDQ6VXNlcjkwMjUyNzY=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/9025276?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rainbowcatcher",
        "html_url": "https://github.com/rainbowcatcher",
        "followers_url": "https://api.github.com/users/rainbowcatcher/followers",
        "following_url": "https://api.github.com/users/rainbowcatcher/following{/other_user}",
        "gists_url": "https://api.github.com/users/rainbowcatcher/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rainbowcatcher/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rainbowcatcher/subscriptions",
        "organizations_url": "https://api.github.com/users/rainbowcatcher/orgs",
        "repos_url": "https://api.github.com/users/rainbowcatcher/repos",
        "events_url": "https://api.github.com/users/rainbowcatcher/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rainbowcatcher/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2019-10-16T03:12:28Z",
      "updated_at": "2019-10-16T03:12:28Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "Souce:\r\nhttps://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L958\r\nhttps://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberCommitWork.js#L1291\r\n\r\nIs there a significant difference between UnmountMutation and UnmountLayout?\r\n\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17090",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17090/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17090/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17090/events",
      "html_url": "https://github.com/facebook/react/issues/17090",
      "id": 507005666,
      "node_id": "MDU6SXNzdWU1MDcwMDU2NjY=",
      "number": 17090,
      "title": "Misleading (?) wording in documentation",
      "user": {
        "login": "brunoscopelliti",
        "id": 3489757,
        "node_id": "MDQ6VXNlcjM0ODk3NTc=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/3489757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoscopelliti",
        "html_url": "https://github.com/brunoscopelliti",
        "followers_url": "https://api.github.com/users/brunoscopelliti/followers",
        "following_url": "https://api.github.com/users/brunoscopelliti/following{/other_user}",
        "gists_url": "https://api.github.com/users/brunoscopelliti/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brunoscopelliti/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brunoscopelliti/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoscopelliti/orgs",
        "repos_url": "https://api.github.com/users/brunoscopelliti/repos",
        "events_url": "https://api.github.com/users/brunoscopelliti/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brunoscopelliti/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 6,
      "created_at": "2019-10-15T04:57:40Z",
      "updated_at": "2019-10-15T21:56:03Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "> A custom Hook is a JavaScript function whose name starts with ”use” and that **may** call other Hooks.\r\n\r\nSource: https://reactjs.org/docs/hooks-custom.html#extracting-a-custom-hook\r\n\r\nWhat I find misleading is the verb _may_.\r\n\r\nWhat's the point of a custom hook that doesn't call any React's hook internally? It doesn't hook to React's internals... it also needn't to follow the rules of hook, and still works perfectly fine. I would say it is just a normal function whose name starts with _use_. \r\n\r\nAm I missing something?",
      "score": 1.0
    }
  ]
}
